** PROSHOP

> sudo  npm install -g npm
- in my local need update the npm first

> npx create-react-app frontend
- command to generate react app into frontend folder 
- Note: IF not working: https://stackoverflow.com/questions/53657920/i-cant-install-react-using-npx-create-react-app

* NODE: - https://nodejs.org/en/download/current/
Latest LTS Version: 12.19.0 (includes npm 6.14.8)
Latest Current Version: 15.0.0 (includes npm 7.0.2)

- use at-least 14.6 version

> cd frontend
> npm start 

Code:
- public/index.html - do the necessary changes
- remove src/logo.svg, (src/setupTest.js), (src/App.test.js), src/App.css
- src/app.js - element wrapper .. use an empty element <> </> called fragment.
- use arrow function

File:
> ls -la
> rm -rf .git
- we want to move the git in the root folder.
- move .gitignore in the main root folder - drag it.
- .gitignore
    - node_modules & node_modules/
    - .env - that could have sensitive info like paypal keys, etc.. 

File:
> git init
- to initialise git
> git add .
> git commit -m "React setup"

File:
- src/ create a new folder called 'components' - for header, footers, sidebar, search
- create src/components/Header.js file

Shorcut: (ES7 React/Redux.... VS extension)
rcc - class components
rfc - react function components
rafce - react arrow function

File:
    - create src/components/Footer.js file
    - src/App.js import Header.js and Footer.js


* React Bootstrap -  react-bootstrap.github.io

Bootswatch.com - customized bootstrap templates
- choose and download boostrap.min.css

> cd frontend
> npm i react-bootstrap

CDNjs - get font-awesome link url tag

File:
    - copy product.js to src and images/ to public
    - create a screens/ folder inside src/ and make new files HomeScreen.js

    do the necessary changes (Lessons 6-7);

File: (Lesson 8)
    - Implementing React Router

    > cd frontend
    > npm i react-router-dom react-router-bootstrap

File: (Lesson 9)
    - Product Screen.js

===== BACKEND ===== 

File: (Section 3: Lesson 10)
    - explaining the workflow.

File: (Section 3: Lesson 11)
    - Create a folder in a root called 'backend'

    - in root folder (not in backend/frontend folder)
    > npm init
        : enter, enter, 'MERN Shopping cart', server.js
    - you can check the package.json

    > npm i express

    > cd backend
    - create a file called 'server.js' - this is the entry point for our backend
    - then create a new folder called 'data', and copy/move frontend/src/products.js to newly created folder.

    * Lets create a some routes to serve the products from the backend.
    - update server.js
    - modules (common js) ES modules in the frontend using: import
    - with node 14.4, you can use ES modules now without having to use  babel or experimental flags.
    - for now use common js 'const express =  require('express')'

    - to test run 'node backend/server'
    - update the /package.json to add the scripts for out entry point.

    > npm start

    Kill Port
    > sudo lsof -i tcp:3000 
    > kill -9 PID

File: (Section 3: Lesson 11)
    - open data/products.js - update the code for ES modules to common js for export, dont have the backend setup for ES Modules yet.
    - 'export default products'  to 'module.exports = products'

    Back to frontend
    > cd frontend
    > npm i axios

    File: (Section 3: Lesson 12)
    - useState: useState hook - use state in functional components
    - useEffect : use effect hook to make a request to our backend
    - axios:

    - add proxy in frontend/package.js ("proxy": "http://127.0.0.1:5000",)

    - delete: product.js - its already from the backend.

File: (Section 3: Lesson 13)
    * in the root
    > npm i -D nodemon concurrently
    - -D: only needed for development..

    - Nodemon: a tools constantly watch our server, so we dont have to keep restarting it
        *
            "server": "nodemon backend/server",
            "client": "npm start --prefix frontend"
        *
        --prefix: this is to go frontend folder first before run npm start.
    - concurrently: a tool to be able to run node/react (frontend/backend) at the same time

    > npm run dev
    - to run both concurrently scripts from package.json

File: (Section 3: Lesson 14)
    - Envirotment Variables, we gonna use dotenv - install it in the root
    > npm i dotenv
    - then add it into backend/server.js
    - then we will create a new file '.env' in root and do the configs, and update the server.js
    - and make sure .env is in .gitignore file
    - lastly, invert this common js syntax ( require() ) to ES Module or ES2015 module, to use the import syntax same with the frontend

    File: (Section 3: Lesson 15) - ES Modules in Node.js
    - to use this you, 2 options, user .mjs or .js but you have to add this '"type": "module"' in package.json
    - the only diff with frontend and backend is in backend if you bringing files, you have to have .js extensions. 
    - convert: 
        from: const express = require('express')
        to: import express from 'express'
        ---
        from: const express = require('./data/products')
        to: import products from './data/products.js'
        - then update the file aswell.
            from: module.exports = products
            to: export default products

MongoDB
File: (Section 4: Lesson 16) - MongoSB Atlas & Compass Setup
    - https://www.mongodb.com  - create account and download Compass. Then do the neccessary steps..
    - Then get the string keys and put it into .env file. 'MONGO_URI = mongodb+srv://dotzar2020:whatismineismine@dotzar.nonik.mongodb.net/proshop?retryWrites=true&w=majority'


File: (Section 4: Lesson 17) - Connect to the Database - using mongoose
    - mongoosejs.com - object modeling for nodejs, allow us to create a model or a schema for different resource such as 'products', 'users' and so on..
    - install in the root 'npm i mongoose' 
    > npm i mongoose
    - then create a new folder under backend called 'config' and add a file under it called 'db.js' and do the codeing..
    - then add it in server.js

File: (Section 4: Lesson 18) - adding colors to the console (optional)
    > npm i colors
    - then go to server.js and import it.
    - then move the server.js and db.js and add the colors.

File: (Section 4: Lesson 19) - Modeling our Data
    - create a new folder called 'models' under backend.
    - then create 3 models - userModel.js, productModel.js and orderModel.js

File: (Section 4: Lesson 20) - Preparing Sample Data
    - data/product.js - first remove the '_id:' data
    - then create a new file under data called user.js and dot the sample 3 user.
    - to hash password, we need to install 'npm i bcryptjs' in root
    > npm i bcryptjs
    - then go ahead import in the data/user.js : password: bcryptjs.hashSync('letmein', 10)

File: (Section 4: Lesson 21) - Data Seeder Script
    - database seeders we can easily import a sample data
    - create a new file called 'seeder.js' under 'backend' folder
    - then do the changes..
        * process.argv[2]
    - then in package.json add this 2 line
        "data:import": "node backend/seeder",
        "data:destroy": "node backend/seeder -d"
    > npm run data:import
    - BE CAREFUL!! on using this command 'specially the destroy'


File: (Section 4: Lesson 22) - Fetching Product from the database
    - in the backend lets create a folder called 'routes'
    - then create a new file under 'routes' called 'productRoutes.js'
    - then get the move the app.router from server.js to productRoutes.js
    - then remove /api/products as we will point it there in server.js - app.use('/api/products', productRoutes)

    - express-async-handler : middlewar for handling exceptions inside of async routes and passing them to your express error handlers
    > npm i express-async-handler


File: (Section 4: Lesson 23) - Started with Postman
    - Explain how to use Postman

File: (Section 4: Lesson 24) - Custom Error handler
    - in server.js after under the productRoutes to add the error middleware
    - do the initial coding in server.js and move to new location
    - create a new folder called 'middleware' under backend
    - create a new file called 'errorMiddleware.js' under backend/middleware
    - then moving some code from server to the errorMiddleware.js, and then import errorMiddleware.js in server.js


// ********************************************************* //
    Back to frontend
    Section 5: Implemeting Redux for State Management
// ********************************************************* //

File: (Section 5: Lesson 25) - Overview of Redux
    - explain some Redux Pattern

File: (Section 5: Lesson 26) - Create a Redux Store
    > cd frontend
    > npm i redux react-redux redux-thunk redux-devtools-extension


    - create a new file 'store.js' inside frontend/src
    - basically where we connect all our reducers and middleware, stuff like that

    - The way we implement the 'store' into our application is through a provider, and a provide come from react-redux
    - we goto frontend/src/index.js (our entry point) and add { Provider } and import also our ./store 
        *
        import { Provider } from 'react-redux'
        import store from './store'
        *

    - And update the <React.StrictMode> to <Provider store={store}>


File: (Section 5: Lesson 27) - Product List Reducer & Action
    - create a new folder called 'reducers' inside frontend/src
    - then create new file 'productReducers.js' inside reducers/
        - then add the 'export const productListReducer' function
        - then bring it in frontend/src/store.js
    - then create a new folder called 'constants' in src/
        - create a new file inside 'productConstants.js'
        - then do the export const on each which var in productConstants.js, and import it to productReducers.js
    - then create a new folder called 'actions' in src/
        - create a new file inside 'productActions.js'
        - then the coding.. 'listProducts'



File: (Section 5: Lesson 28) - Bringin Redux State into HomeScreen - use Dispatch & useSelector
    - CONT: listProducts - fired it up in src/screens/HomeScreen.js, and delete some obselete code
    - to test out the error.. in backend/routes/productRoutes.js
    *
    res.status(401)
    throw new Error('Not Authorised')
    *

File: (Section 5: Lesson 29) - Message & Loader components
    - create 2 new components in frontend/src/components/ folder, Message.js and Loader.js
    - and do the code for 2 files
    - then bring them in frontend/src/sreens/HomeSreen.js and update the markup

File: (Section 5: Lesson 30) - Product Details Reducer & Action
    - Samething with Homescreen - fetch from state, we gonna create a productDetialReducers and Actions and get the data using useSelector
    - this will be our flow/structtures
        1. start with the frontend/src/constants/ in productConstant.js
        2. next will go to frontend/src/reducers/ in productReducers.js
        3. next add it to frontend/src/store.js
        4. create our a new actions in frontend/src/actions/ in productActions.js
        5. then we will go to our screens, our ProductScreen.js in frontend/src/screens


* Section 6: Adding the Shopping Cart
File: (Section 6: Lesson 31) - Qty Select & Add to Cart Button
